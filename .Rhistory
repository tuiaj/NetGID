getwd()
load("ExData.RData")
all_inout
edges
nodes
nodexCols
knitr::opts_chunk$set(echo = TRUE)
set.dir <- getwd(); #set.dir
knitr::opts_knit$set(root.dir = paste0(set.dir))
# folding the output from: https://github.com/rstudio/rmarkdown/issues/1453
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
force(type)
function(x, options) {
res = hooks[[type]](x, options)
if (isFALSE(options[[paste0("fold.", type)]])) return(res)
paste0(
"<details><summary>", type, "</summary>\n\n",
res,
"\n\n</details>"
)
}
}
knitr::knit_hooks$set(
output = hook_foldable("output"),
plot = hook_foldable("plot")
)
# load the necessary packages
library(tidyverse) # for data manipulation
library(shiny) # for reactive interactive plots
install.packages("shiny")
install.packages("shiny")
library(shiny) # for reactive interactive plots
library(visNetwork) # for interactive network plots
installed.packages("visNetwork")
install.packages("visNetwork")
library(visNetwork) # for interactive network plots
library(igraph) # for network graph functions, including path-finding
install.packages("igraph")
library(reshape2) # for data manipulation
install.packages(reshape2)
install.packages("reshape2")
library(reshape2) # for data manipulation
library(igraph) # for network graph functions, including path-finding
library(ggplot2) # for plotting
library(data.table) # for data manipulation
library(DT) # for nice data tables in html
install.packages("DT")
library(DT) # for nice data tables in html
# Note - here is the color palette in use for the default visualization groupings
colorPal <- c("red","orange","lightskyblue","steelblue",
"turquoise","royalblue","lightslateblue","grey")
summary(nodes)
DT::datatable(head(nodes))
# Data frame to build legend for nodes
lnodes <- data.frame(label = c("SQL\n Program","SAS\n Program","Shared\n Phenotypes",
"EHR\n Metadata","EHR\n Source\n Data","Claims\n Data",
"Project-\nspecific\n Data"),
shape = c(rep("dot",2),rep("square",5)),
color = colorPal[1:7],
id = 1:7
,size=rep(20,7)
,style = rep("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:35px;text-align:center;",7)
)
# build a plot function
plot_network <- function(nodes, edges, seedset, layout_spec, pw, ph, fsize) {
visNetwork(nodes, edges, width=pw, height=ph) %>%
# network layout by the igraph package
visIgraphLayout(randomSeed = seedset, layout = layout_spec) %>%
visNodes(font = list(size=fsize, border ="grey")) %>%
visEdges(color = list(color="black"), arrows = 'to')
}
plot_network
basic_graph <- plot_network(nodes,edges,111,"layout_with_dh",
pw=c("800px"), ph=c("800px"),
fsize=25) %>%
visInteraction(dragNodes = T, multiselect = T) %>%
visLegend(width = 0.2,
position = "right",
main = list(text="Node Type",
style="font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:12px;text-align:center;"),
addNodes = lnodes,
useGroups = F)
# Nothing special, this is our base-case network that we "keep" for the backend of the selection factors
basic_graph
basic_graph
g
# turn dataset into an igraph object
ig_dat <- graph_from_data_frame(edges, directed=TRUE, vertices = nodes)
ig_dat
V(ig_dat)
all_inout
server <- function(input, output, session) {
output$network <- renderVisNetwork({
plot_network(nodes, edges, 111, "layout_with_dh",
pw="100%", ph="100%", fsize=24) %>%
visOptions(nodesIdSelection = T) %>%
visExport()
})
#when user picks a node on the graph ...
observeEvent(input$network_selected, {
if (is.character(input$network_selected) && nchar(input$network_selected) > 0) {
selectedNodeId <- input$network_selected
nodes$R_timestamp <- format(nodes$R_timestamp,'%Y-%m-%dT%H:%M:%S+000')
# Get and display node info
selectedNodeInfo <- nodes %>%
filter(id == selectedNodeId) %>%
select(all_of(c("id","label","type","nodesubtype",
"group","R_timestamp")))
output$nodeInfo <- renderTable({
selectedNodeInfo
})
# get and display multiple attribute info; built table in/out list for code,cols for data
if (nodes[nodes$id == selectedNodeId, "type"] == "Code") {
selectedAttrInfo <- all_inout         %>%
filter(select_id == selectedNodeId)  %>%
select(all_of(c("id","label","in_out",
"nodesubtype","group","R_timestamp")))
}
if (nodes[nodes$id == selectedNodeId, "type"] == "Data") {
selectedAttrInfo <- nodexCols %>%
filter(id == selectedNodeId)
}
output$multAttrInfo <- renderDataTable({
selectedAttrInfo
})
}
})
session$onSessionEnded(function() {stopApp()}) # added due to continuous crashing
}
source("~/.active-rstudio-document", echo=TRUE)
runApp('Shinyapp_og.R')
detail_plot
V(ig_dat)
ig_dat
basic_graph
%<>%
all_inout
all_inout |>
count(nodesubtype)
all_inout |>
count(nodesubtype) |>
ggplot(aes(x = nodesubtype, y = n))
all_inout |>
count(nodesubtype) |>
ggplot(aes(x = nodesubtype, y = n)) +
geom_bar(stat = "identity")
idk <_ all_inout |>
idk <- all_inout |>
count(nodesubtype) |>
ggplot(aes(x = nodesubtype, y = n)) +
geom_bar(stat = "identity")
idk
idk %+% subset(idk, nodesubtype == "SAS")
idk
idk <- all_inout |>
count(nodesubtype)
idk2 <- idk |>
ggplot(aes(x = nodesubtype, y = n)) +
geom_bar(stat = "identity")
idk %+% subset(idk, nodesubtype == "SAS")
idk2 %+% subset(idk, nodesubtype == "SAS")
idk2 <- idk |>
ggplot(aes(x = nodesubtype, y = n)) +
geom_bar(stat = "identity")
idk2
idk2 %+% subset(idk, nodesubtype == "SAS")
idk2$data
idk2 %+% subset(idk2$data, nodesubtype == "SAS")
basic_graph
basic_graph$x
ig_dat
V(ig_dat)
unused_dat
unused_dat <- c(names(which(igraph::degree(ig_dat,mode="out")==0)))
nodes2
# create version of graph with updated node color for unused datasets
nodes2 <- nodes %>%
mutate(shape = case_when(id %in% unused_dat ~ "star", # change the shape for these nodes
TRUE ~ shape)) %>%
mutate(color = case_when(id %in% unused_dat ~ "red", # set all the nodes to grey and then highlight these in red
TRUE ~ "grey")) %>%
mutate(size = case_when(id %in% unused_dat ~ 50,
TRUE ~ 30))          %>%
rename(group2="group") %>% # recreate the 'group' variable to ensure there is an eighth shape plotted
mutate(group = case_when(id %in% unused_dat ~ 8,
TRUE ~ as.numeric(group2))) %>%
mutate(label = case_when(id %in% unused_dat ~ label,
TRUE ~ ' ')) # only keep the labels (print-names) for the selected nodes
nodes
unused_dat
nodes2
detail_plot
detail_plot <- visNetwork(nodes2, edges,width = "800px", height = "800px") %>%
# network layout by the igraph package
visIgraphLayout(randomSeed = 111, layout = "layout_with_dh"
) %>%
visNodes(color = list(background = "color", border = "color"),
font = list(size=32
#, border="grey"
)) %>%
visEdges(color = list(color="black"), arrows = 'to', smooth = list(enabled = T)
) %>%
visLegend(width = 0.1,
position = "right",
addNodes = list(
list(label = c('Unused\n Data'), shape="star", color="red")
),
useGroups = F)
# now view it
detail_plot
#D020 is meds_foradjudication_v1_reviewed
#P053 is make_final_analytic
# Going in the direction of the flow only
asp <- all_simple_paths(ig_dat, from="D020", to="P053")
#get nodes along the path
path_nodes <- unique(names(unlist(asp)))
# color nodes along path, start and end, etc.
new_nodes <- nodes %>% mutate(color=case_when(id == "D020" ~ "green", # starting node
id == "P053" ~ "red", # ending node
id %in% path_nodes ~ "orange", # all other nodes in the path
TRUE ~ "grey")) %>%
# remove label for everything not touching the nodes on the path
mutate(label = case_when(id %in% path_nodes ~ label, TRUE ~ ' '))
path_edges <-  unlist(
lapply(all_simple_paths(ig_dat,from=c("D020"),to=c("P053")),
function(x)
get.edge.ids(ig_dat, c(rbind(head(x,-1),x[-1])))
))
# Recolor the edges to make the selected ones red
new_edges <- edges %>%
mutate(color = case_when(id %in% path_edges ~ "red", TRUE ~ "grey"))  %>%
mutate(width = case_when(id %in% path_edges ~ 10, TRUE ~ 2))
detail_plot <- visNetwork(new_nodes, new_edges, width = "800px", height = "800px") %>%
visIgraphLayout(randomSeed = 111, layout = "layout_with_dh") %>%
visNodes(color = list(background = "color", border = "color"),
font = list(size=32)) %>%
visEdges(arrows = 'to', smooth = list(enabled = T)) %>%
visLegend(width = 0.1,
position = "right",
addNodes = list(
list(label = c("Start Node"), shape="square", color="green"),
list(label = "Path Node", shape="dot", color="orange"),
list(label="End Node", shape="dot", color="red")
),
useGroups = F)
new_edges
visNetwork(new_nodes, new_edges, width = "800px", height = "800px")
nodes
asp
ig_dat
path_nodes
nodes
nodes |>
filter(id == "D020")
edges
all_inout
all_inout |>
count(in_out)
nodes |>
filter(id == "D020")
all_inout |>
filter(id == "D020")
all_inout |>
filter(id == "D020")
edges
nodexCols
nodes |>
filter(id == "D020")
edges
edges |>
pivot_longer(cols = c("from", "to"),
names_to = "direction",
values_to = "node")
edges |>
pivot_longer(cols = c("from", "to"),
names_to = "in_out",
values_to = "node")
edges |>
pivot_longer(cols = c("from", "to"),
names_to = "in_out",
values_to = "node") |>
filter(id == "D020")
edges |>
pivot_longer(cols = c("from", "to"),
names_to = "in_out",
values_to = "node")
edges |>
pivot_longer(cols = c("from", "to"),
names_to = "in_out",
values_to = "node") |>
filter(node == "D020")
asp
path_nodes
edges |>
pivot_longer(cols = c("from", "to"),
names_to = "in_out",
values_to = "node") |>
filter(node == "D020")
edges_all <- edges |>
pivot_longer(cols = c("from", "to"),
names_to = "in_out",
values_to = "node")
edges_all
edges_all |>
filter(node == "D020")
asp
path_nodes
as.character(path_nodes)
as.character(asp)
edges_all
edges
edges_all
edges_all |>
filter(node == "D020")
idk3 <- edges_all |>
filter(node == "D020")
idk3
edges_all |>
filter(id == "13")
asp
as.character(asp)
edges_all |>
filter(id == "13")
idk3 <- edges_all |>
filter(node == "D020") |>
pull(node)
idk3
edges_all |>
filter(id == "13")|>
pull(node)
idk3 <- edges_all |>
filter(node == "D020")
edges_all |>
filter(id == "13")|>
pull(node)
ls <- c()
ls_ <- c()
edges_all |>
filter(id == "13")|>
pull(node) |>
append(ls_)
asp
runApp('Shinyapp_og.R')
path_nodes
nodes
path_nodes
all_simple_paths(ig_dat,from=c("D020"),to=c("P053"))
path_edges <-  unlist(
lapply(all_simple_paths(ig_dat,from=c("D020"),to=c("P053")),
function(x)
get.edge.ids(ig_dat, c(rbind(head(x,-1),x[-1])))
))
path_edges
edges
edges %>%
mutate(color = case_when(id %in% path_edges ~ "red", TRUE ~ "grey"))
edges %>%
mutate(color = case_when(id %in% path_edges ~ "red", TRUE ~ "grey"))  %>%
mutate(width = case_when(id %in% path_edges ~ 10, TRUE ~ 2))
new_edges
new_nodes
new_nodes
new_edges
visNetwork(new_nodes, new_edges, width = "800px", height = "800px")
visNetwork(new_nodes, new_edges, width = "800px", height = "800px") %>%
visIgraphLayout(randomSeed = 111, layout = "layout_with_dh")
visNetwork(new_nodes, new_edges, width = "800px", height = "800px") %>%
visIgraphLayout(randomSeed = 111, layout = "layout_with_dh") %>%
visNodes(color = list(background = "color", border = "color"),
font = list(size=32))
visNetwork(new_nodes, new_edges, width = "800px", height = "800px") %>%
visIgraphLayout(randomSeed = 111, layout = "layout_with_dh") %>%
visNodes(color = list(background = "color", border = "color"),
font = list(size=32)) %>%
visEdges(arrows = 'to', smooth = list(enabled = T)) %>%
visLegend(width = 0.1,
position = "right",
addNodes = list(
list(label = c("Start Node"), shape="square", color="green"),
list(label = "Path Node", shape="dot", color="orange"),
list(label="End Node", shape="dot", color="red")
),
useGroups = F)
basic_graph$x
path_nodes
basic_graph %+% subset(path_nodes$x, id == "D020")
basic_graph %+% subset(path_nodes$x, id == "D020")
basic_graph
path_nodes$x
basic_graph$x
basic_graph %+% subset(basic_graph$x$nodes, id == "D020")
idk <- basic_graph %+% subset(basic_graph$x$nodes, id == "D020")
idk
idk
basic_graph$sizingPolicy
basic_graph$elementId
basic_graph$x
basic_graph$x$edges
basic_graph$x$edges |>
filter(if_any(everything(), ~grepl("D020", .x)))
paste0(new_nodes, collapse = "|")
new_nodes
path_nodes
paste0(path_nodes, collapse = "|")
paste0(path_nodes, collapse = "^|")
paste0(path_nodes, collapse = "|^")
paste0(path_nodes, "$",collapse = "|^")
basic_graph$x$edges |>
filter(if_any(everything(), ~grepl(paste0(path_nodes, "$",collapse = "|^"), .x)))
newstuff <- basic_graph$x$edges |>
filter(if_any(everything(), ~grepl(paste0(path_nodes, "$",collapse = "|^"), .x)))
basic_graph$x$edges
basic_graph$x
map(basic_graph$x, ~ length(.x))
map(basic_graph$x, ~ nrow(.x))
basic_graph$x
basic_graph$x
basic_graph$x$byselection
basic_graph$x$main
?plot_network
unused_dat
visNetwork(nodes2, edges,width = "800px", height = "800px")
shinylive::export("myapp", "site")
shinylive::export("Shinyapp_og", "site")
shinylive::export("myapp", "site")
shinylive::export("myapp", "site")
library("shinylive")
shinylive::export("myapp", "site")
shinylive::export("myapp", "site")
library(webr)
shinylive::export("myapp", "site")
